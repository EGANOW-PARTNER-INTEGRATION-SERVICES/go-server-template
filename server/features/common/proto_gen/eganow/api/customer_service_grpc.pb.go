// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/customer_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomerAccountOnboarding_GenerateOTPForNewCustomerCreation_FullMethodName = "/eganow.api.CustomerAccountOnboarding/GenerateOTPForNewCustomerCreation"
)

// CustomerAccountOnboardingClient is the client API for CustomerAccountOnboarding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerAccountOnboardingClient interface {
	// generate OTP for new customer account creation
	GenerateOTPForNewCustomerCreation(ctx context.Context, in *GenerateOTPRequest, opts ...grpc.CallOption) (*StringValue, error)
}

type customerAccountOnboardingClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerAccountOnboardingClient(cc grpc.ClientConnInterface) CustomerAccountOnboardingClient {
	return &customerAccountOnboardingClient{cc}
}

func (c *customerAccountOnboardingClient) GenerateOTPForNewCustomerCreation(ctx context.Context, in *GenerateOTPRequest, opts ...grpc.CallOption) (*StringValue, error) {
	out := new(StringValue)
	err := c.cc.Invoke(ctx, CustomerAccountOnboarding_GenerateOTPForNewCustomerCreation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerAccountOnboardingServer is the server API for CustomerAccountOnboarding service.
// All implementations must embed UnimplementedCustomerAccountOnboardingServer
// for forward compatibility
type CustomerAccountOnboardingServer interface {
	// generate OTP for new customer account creation
	GenerateOTPForNewCustomerCreation(context.Context, *GenerateOTPRequest) (*StringValue, error)
	mustEmbedUnimplementedCustomerAccountOnboardingServer()
}

// UnimplementedCustomerAccountOnboardingServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerAccountOnboardingServer struct {
}

func (UnimplementedCustomerAccountOnboardingServer) GenerateOTPForNewCustomerCreation(context.Context, *GenerateOTPRequest) (*StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOTPForNewCustomerCreation not implemented")
}
func (UnimplementedCustomerAccountOnboardingServer) mustEmbedUnimplementedCustomerAccountOnboardingServer() {
}

// UnsafeCustomerAccountOnboardingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerAccountOnboardingServer will
// result in compilation errors.
type UnsafeCustomerAccountOnboardingServer interface {
	mustEmbedUnimplementedCustomerAccountOnboardingServer()
}

func RegisterCustomerAccountOnboardingServer(s grpc.ServiceRegistrar, srv CustomerAccountOnboardingServer) {
	s.RegisterService(&CustomerAccountOnboarding_ServiceDesc, srv)
}

func _CustomerAccountOnboarding_GenerateOTPForNewCustomerCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerAccountOnboardingServer).GenerateOTPForNewCustomerCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerAccountOnboarding_GenerateOTPForNewCustomerCreation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerAccountOnboardingServer).GenerateOTPForNewCustomerCreation(ctx, req.(*GenerateOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerAccountOnboarding_ServiceDesc is the grpc.ServiceDesc for CustomerAccountOnboarding service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerAccountOnboarding_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.CustomerAccountOnboarding",
	HandlerType: (*CustomerAccountOnboardingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateOTPForNewCustomerCreation",
			Handler:    _CustomerAccountOnboarding_GenerateOTPForNewCustomerCreation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/customer_service.proto",
}
